<#
.SYNOPSIS
  Generate a generic jq filter to convert JSON to CSV based on specified JSON paths,
  ensuring that even空のカラム行も必ず出力されるようにする。

.PARAMETER JsonFile
  Path to input JSON file.

.PARAMETER JqOutput
  Path to output .jq filter file.

.PARAMETER Paths
  Array of JSON paths to extract. 最初のパスは配列展開を含む必要あり, e.g. 'Items[].Id'.

.PARAMETER Headers
  Array of CSV header names. Must correspond to Paths order.
#>
param(
    [Parameter(Mandatory)][string]   $JsonFile,
    [Parameter(Mandatory)][string]   $JqOutput,
    [Parameter(Mandatory)][string[]] $Paths,
    [Parameter(Mandatory)][string[]] $Headers
)

# --- 1) 入力チェック ---
if ($Paths.Count -lt 1) {
    throw 'At least one JSON path must be specified.'
}

# --- 2) ルート配列とキーを抽出 ---
if ($Paths[0] -match '^(?<root>[^\[]+)\[\]\.(?<first>.+)$') {
    $rootArray = $Matches['root']   # e.g. SecurityGroups
    $firstKey  = $Matches['first']  # e.g. Description
} else {
    throw 'First path must be in format Name[].Key'
}

# --- 3) ヘッダー行を組み立て ---
$headerJson = '["' + ($Headers -join '","') + '"]'

# --- 4) jq フィルタを組み立て ---
$jqLines = @()

# 4.1 ヘッダー行 （最後に一度だけ @csv で文字列化）
$jqLines += '(' + $headerJson + ' | @csv),'

# 4.2 レコード抽出ブロック開始
$jqLines += '('
$jqLines += '  .' + $rootArray + '[] |'
$jqLines += '  .' + $firstKey  + ' as $col0 |'

# 4.3 各追加パスを「空なら[""]」にフェールバックして変数に束縛
for ($i = 1; $i -lt $Paths.Count; $i++) {
    $pVar = '$p' + $i        # $p1, $p2, ...
    $path = $Paths[$i]
    if ($path -match '^[^\[]+\[\]\.(.+)$') {
        $subPath = $Matches[1]
    } else {
        throw "Path '$path' must start with '${rootArray}[].'"
    }
    # .<subPath>? を配列に詰め、空なら [""] を返す
    $expr = '( [ .' + $subPath + '? ] | if length == 0 then [""] else . end ) as ' + $pVar + ' |'
    $jqLines += '  ' + $expr
}

# 4.4 変数を展開して完全な組み合わせを列挙
for ($i = 1; $i -lt $Paths.Count; $i++) {
    $pVar = '$p' + $i
    $vVar = '$v' + $i
    $jqLines += '  ' + $pVar + '[] as ' + $vVar + ' |'
}

# 4.5 最終的な配列を作って CSV 化
#     [$col0, $v1, $v2, ...]
$fieldList = @('$col0')
for ($i = 1; $i -lt $Paths.Count; $i++) { $fieldList += '$v' + $i }
$jqLines += '  [' + ($fieldList -join ', ') + '] | @csv'

# 4.6 ブロック閉じ
$jqLines += ')'

# --- 5) ファイル出力（UTF‑8 BOMなし） ---
[System.IO.File]::WriteAllLines(
    $JqOutput,
    $jqLines,
    (New-Object System.Text.UTF8Encoding($false))
)

Write-Host "Generated jq filter at $JqOutput"

# 差し替え対象の開始位置
    foreach ($jsonFile in $jsonFiles) {
        Write-Host "--------------------------------------------------"
        Write-Host "処理開始: $($jsonFile.FullName)"

        try {
            # ---
            # 1. BOMなしUTF-8へ変換
            # ---
            $content = Get-Content -Path $jsonFile.FullName -Raw -Encoding utf8
            [System.IO.File]::WriteAllText($jsonFile.FullName, $content, $utf8WithoutBom)
            Write-Host "[1/3] BOMなしUTF-8へ変換完了"

            # ---
            # 2. JSONキーに基づき、使用するファイル名を決定
            # ---
            $firstKey = (& $jqPath -r "keys[0]" $jsonFile.FullName 2>$null).Trim()

            if (-not $fileMapping.ContainsKey($firstKey)) {
                throw "JSONキー '$firstKey' に対応する定義がマッピングに見つかりません。スクリプト内の`$fileMapping`を確認してください。"
            }

            # マッピングから対応するファイル名を取得
            $mappingInfo = $fileMapping[$firstKey]
            $jqFileName = $mappingInfo.JqFile
            $outputFileBaseName = $mappingInfo.OutputFileBase

            # input_jsonからの相対パスを取得
            $relativeSubDir = $jsonFile.Directory.FullName.Replace($inputDir, "").TrimStart("\")

            # ★★★★★ 変更点：パスの構築方法を修正 ★★★★★
            # より安全な「展開可能な文字列」形式でパスを構築します。

            $outputSubDir = "$outputDir\$relativeSubDir"
            $jqQueryFile = "$outputSubDir".Replace($outputDir, $jqQueryDir) + "\$jqFileName"
            $csvFileName = "${dateString}_${outputFileBaseName}.csv"
            $csvOutputFile = "$outputSubDir\$csvFileName"
            
            # ★★★★★ 変更ここまで ★★★★★

            Write-Host "[2/3] JQクエリ '$jqQueryFile' を使用し、'$csvOutputFile' に出力します。"

            # ---
            # 3. jqでCSVに変換し、ファイルに保存
            # ---
            if (-not (Test-Path -Path $jqQueryFile -PathType Leaf)) {
                throw "JQクエリファイルが見つかりません: $jqQueryFile"
            }
            if (-not (Test-Path -Path $outputSubDir -PathType Container)) {
                New-Item -Path $outputSubDir -ItemType Directory | Out-Null
            }

            $jqArgs = @('-r', '-f', $jqQueryFile, $jsonFile.FullName)
            
            # jqを実行し、結果を変数に格納
            $jqOutput = & $jqPath $jqArgs 2>&1

            # jqの実行結果を確認
            if ($LASTEXITCODE -ne 0) {
                throw "jq.exeがエラーを返しました: $jqOutput"
            }

            # 成功した場合のみファイルに書き込み
            $jqOutput | Set-Content -Path $csvOutputFile -Encoding utf8
            
            Write-Host "[3/3] CSVファイルの作成が完了しました。"
        }
        catch {
            Write-Warning "エラーが発生しました: $($_.Exception.Message)"
            continue # エラーが発生しても次のファイルの処理へ
        }
    }
    # 差し替え対象の終了位置
